import os
import random
from functools import partial
from glob import glob
from multiprocessing.pool import ThreadPool

import tqdm
from sqlalchemy.engine import Engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy import Column, Integer, String, BigInteger, Float, DateTime, JSON, BOOLEAN
from sqlalchemy.orm import sessionmaker
import pandas as pd
import numpy as np

Base = declarative_base()


class ModelPerformance(Base):
    __tablename__ = 'model_performance'

    id = Column(Integer, primary_key=True)
    date = Column(DateTime, index=True)
    version = Column(JSON, nullable=True)
    recall = Column(JSON)
    precision = Column(JSON)
    f1_score = Column(JSON)
    roc_auc = Column(Float)
    confusion_matrix = Column(JSON)
    is_live_perf = Column(BOOLEAN, index=True)
    is_training_performance = Column(BOOLEAN)


class HardDriveStatus(Base):
    __tablename__ = 'hard_drive_status'

    id = Column(Integer, primary_key=True)
    serial_number = Column(String)
    model = Column(String)
    date = Column(DateTime)
    prediction = Column(Float, nullable=True)
    capacity_bytes = Column(BigInteger)
    failure = Column(Integer)
    smart_1_normalized = Column(Float)
    smart_1_raw = Column(Float)
    smart_2_normalized = Column(Float)
    smart_2_raw = Column(Float)
    smart_3_normalized = Column(Float)
    smart_3_raw = Column(Float)
    smart_4_normalized = Column(Float)
    smart_4_raw = Column(Float)
    smart_5_normalized = Column(Float)
    smart_5_raw = Column(Float)
    smart_7_normalized = Column(Float)
    smart_7_raw = Column(Float)
    smart_8_normalized = Column(Float)
    smart_8_raw = Column(Float)
    smart_9_normalized = Column(Float)
    smart_9_raw = Column(Float)
    smart_10_normalized = Column(Float)
    smart_10_raw = Column(Float)
    smart_11_normalized = Column(Float)
    smart_11_raw = Column(Float)
    smart_12_normalized = Column(Float)
    smart_12_raw = Column(Float)
    smart_13_normalized = Column(Float)
    smart_13_raw = Column(Float)
    smart_15_normalized = Column(Float)
    smart_15_raw = Column(Float)
    smart_16_normalized = Column(Float)
    smart_16_raw = Column(Float)
    smart_17_normalized = Column(Float)
    smart_17_raw = Column(Float)
    smart_22_normalized = Column(Float)
    smart_22_raw = Column(Float)
    smart_23_normalized = Column(Float)
    smart_23_raw = Column(Float)
    smart_24_normalized = Column(Float)
    smart_24_raw = Column(Float)
    smart_168_normalized = Column(Float)
    smart_168_raw = Column(Float)
    smart_170_normalized = Column(Float)
    smart_170_raw = Column(Float)
    smart_173_normalized = Column(Float)
    smart_173_raw = Column(Float)
    smart_174_normalized = Column(Float)
    smart_174_raw = Column(Float)
    smart_177_normalized = Column(Float)
    smart_177_raw = Column(Float)
    smart_179_normalized = Column(Float)
    smart_179_raw = Column(Float)
    smart_181_normalized = Column(Float)
    smart_181_raw = Column(Float)
    smart_182_normalized = Column(Float)
    smart_182_raw = Column(Float)
    smart_183_normalized = Column(Float)
    smart_183_raw = Column(Float)
    smart_184_normalized = Column(Float)
    smart_184_raw = Column(Float)
    smart_187_normalized = Column(Float)
    smart_187_raw = Column(Float)
    smart_188_normalized = Column(Float)
    smart_188_raw = Column(Float)
    smart_189_normalized = Column(Float)
    smart_189_raw = Column(Float)
    smart_190_normalized = Column(Float)
    smart_190_raw = Column(Float)
    smart_191_normalized = Column(Float)
    smart_191_raw = Column(Float)
    smart_192_normalized = Column(Float)
    smart_192_raw = Column(Float)
    smart_193_normalized = Column(Float)
    smart_193_raw = Column(Float)
    smart_194_normalized = Column(Float)
    smart_194_raw = Column(Float)
    smart_195_normalized = Column(Float)
    smart_195_raw = Column(Float)
    smart_196_normalized = Column(Float)
    smart_196_raw = Column(Float)
    smart_197_normalized = Column(Float)
    smart_197_raw = Column(Float)
    smart_198_normalized = Column(Float)
    smart_198_raw = Column(Float)
    smart_199_normalized = Column(Float)
    smart_199_raw = Column(Float)
    smart_200_normalized = Column(Float)
    smart_200_raw = Column(Float)
    smart_201_normalized = Column(Float)
    smart_201_raw = Column(Float)
    smart_218_normalized = Column(Float)
    smart_218_raw = Column(Float)
    smart_220_normalized = Column(Float)
    smart_220_raw = Column(Float)
    smart_222_normalized = Column(Float)
    smart_222_raw = Column(Float)
    smart_223_normalized = Column(Float)
    smart_223_raw = Column(Float)
    smart_224_normalized = Column(Float)
    smart_224_raw = Column(Float)
    smart_225_normalized = Column(Float)
    smart_225_raw = Column(Float)
    smart_226_normalized = Column(Float)
    smart_226_raw = Column(Float)
    smart_231_normalized = Column(Float)
    smart_231_raw = Column(Float)
    smart_232_normalized = Column(Float)
    smart_232_raw = Column(Float)
    smart_233_normalized = Column(Float)
    smart_233_raw = Column(Float)
    smart_235_normalized = Column(Float)
    smart_235_raw = Column(Float)
    smart_240_normalized = Column(Float)
    smart_240_raw = Column(Float)
    smart_241_normalized = Column(Float)
    smart_241_raw = Column(Float)
    smart_242_normalized = Column(Float)
    smart_242_raw = Column(Float)
    smart_250_normalized = Column(Float)
    smart_250_raw = Column(Float)
    smart_251_normalized = Column(Float)
    smart_251_raw = Column(Float)
    smart_252_normalized = Column(Float)
    smart_252_raw = Column(Float)
    smart_254_normalized = Column(Float)
    smart_254_raw = Column(Float)
    smart_255_normalized = Column(Float)
    smart_255_raw = Column(Float)


def _upload_record(record, session_cls):
    session = session_cls()
    db_record = HardDriveStatus(**record)
    session.add(db_record)
    session.commit()


def upload_csv(all_files_path, engine: Engine):
    Base.metadata.create_all(engine)

    Session = sessionmaker(bind=engine)
    for file_path in glob(all_files_path):
        print('doing {}'.format(file_path))
        data = pd.read_csv(file_path)
        data['date'] = pd.to_datetime(data.date)
        seconds = pd.Series(np.random.randint(0, 86399, size=data['date'].shape))
        seconds = seconds.map(lambda x: pd.Timedelta(seconds=x))
        data['date'] = data['date'] + seconds
        list_data = data.to_dict(orient='record')
        if os.environ.get('CHARIOTS_LOCAL') == 'true':
            print('running local')
            for record in tqdm.tqdm(list_data):
               _upload_record(record, Session)
        else:
            local = os.environ.get('CHARIOTS_LOCAL') == 'true'
            with ThreadPool(3 if local else 50) as pool:
                _ = list(tqdm.tqdm(pool.imap(partial(_upload_record, session_cls=Session), list_data), total=len(list_data)))
